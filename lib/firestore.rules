rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{documents=**} {

      match /posts/{postID} {
        allow read;
      }
      
      match /users/{userID} {
        allow read;
        allow create: if isValidUser(userID);
      }

      match /usernames/{username} {
        allow read;
        allow create: if isValidUsername(username);
      }

      match /users/{userID}/posts/{postID} {
        allow read;
        allow create: if canCreatePost(userID);
        allow update: if canUpdatePost(userID) || canIncrementHearts(userID, postID);
        allow delete: if request.auth.uid == userID;
      }

      match /users/{userID}/posts/{postID}/hearts/{heartID} {
        allow read;
        allow write: if request.auth.uid == heartID;
      }

      function canCreatePost(userID) {
        let isOwner = request.auth.uid == userID;
        let isNow = request.time == request.resource.data.createdAt;
        let isValidContent = request.resource.data.content.size() < 20000 && request.resource.data.heartCount == 0;
        let username = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username;
        let usernameMatches = request.resource.data.username == username;

        return isOwner && isNow && isValidContent && usernameMatches;
      }

      function canUpdatePost(userID) {
        let isOwner = request.auth.uid == userID;
        let isNow = request.time == request.resource.data.updatedAt;
        let isValidContent = request.resource.data.content.size() < 20000;
        let doesNotUpdateForbidden = !request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'username', 'heartCount']);

        return isOwner && isNow && isValidContent && doesNotUpdateForbidden;
      }

      function canIncrementHearts(userID, postID) {
        let hasValueFields = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['heartCount']);
        let currentUser = request.auth.uid;

        let heartDocExistsAfter = existsAfter(/databases/$(database)/users/$(userID)/posts/$(postID)/hearts/$(currentUser));
        let heartDocExists = exists(/databases/$(database)/users/$(userID)/posts/$(postID)/hearts/$(currentUser));

        let heartAdded = !heartDocExists && heartDocExistsAfter;
        let heartRemoved = heartDocExists && !heartDocExistsAfter;

        let countChange = request.resource.data.heartCount - resource.data.heartCount;
        let validChange = countChange == 1 || countChange == -1;

        return hasValueFields && validChange && (countChange == 1 ? heartAdded : heartRemoved);
      }

      function isValidUser(userID) {
        let isOwner = request.auth.uid == userID;
        let username = request.resource.data.username;
        let createdValidUsername = existsAfter(/databases/$(database)/usernames/$(username));

        return isOwner && createdValidUsername;
      }

      function isValidUsername(username) {
        let isOwner = request.auth.uid == request.resource.data.uid;
        let isValidLength = username.size() >= 3 && username.size() <= 15;
        let isValidUserDoc = getAfter(/databases/$(database)/users/$(request.auth.uid)).data.username == username;

        return isOwner && isValidLength && isValidUserDoc;
      }
    }
  }
}